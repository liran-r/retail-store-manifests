---
# Source: retail-store-sample-orders-chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: retail-store-orders
  labels:
    helm.sh/chart: orders-0.8.4
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
---
# Source: retail-store-sample-orders-chart/templates/postgresql-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orders-db
data:
  username: "b3JkZXJz"
  password: "WGNPNVNVbzN5MHVtOEJXWA=="
---
# Source: retail-store-sample-orders-chart/templates/rabbitmq-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orders-rabbitmq
data:
---
# Source: retail-store-sample-orders-chart/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: retail-store-orders
data:
  RETAIL_ORDERS_MESSAGING_PROVIDER: rabbitmq
  SPRING_DATASOURCE_URL: jdbc:postgresql://retail-store-orders-postgresql:5432/orders
  SPRING_RABBITMQ_ADDRESSES: amqp://retail-store-orders-rabbitmq:5672
---
# Source: retail-store-sample-orders-chart/templates/postgresql-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: retail-store-orders-postgresql
  labels:
    helm.sh/chart: orders-0.8.4
    app.kubernetes.io/name: retail-store-orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: postgresql
      protocol: TCP
      name: postgresql
  selector:
    app.kubernetes.io/name: retail-store-orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: postgresql
---
# Source: retail-store-sample-orders-chart/templates/rabbitmq-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: retail-store-orders-rabbitmq
  labels:
    helm.sh/chart: orders-0.8.4
    app.kubernetes.io/name: retail-store-orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5672
      targetPort: amqp
      protocol: TCP
      name: amqp
    - port: 15672
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: retail-store-orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: rabbitmq
---
# Source: retail-store-sample-orders-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: retail-store-orders
  labels:
    helm.sh/chart: orders-0.8.4
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
---
# Source: retail-store-sample-orders-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: retail-store-orders
  labels:
    helm.sh/chart: orders-0.8.4
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: retail-store-orders
      app.kubernetes.io/component: service
      app.kuberneres.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: retail-store-orders
        app.kubernetes.io/component: service
        app.kuberneres.io/owner: retail-store-sample
    spec:
      serviceAccountName: retail-store-orders
      securityContext:
        fsGroup: 1000
      containers:
        - name: orders
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: password
          envFrom:
            - secretRef:
                name: orders-rabbitmq
            - configMapRef:
                name: retail-store-orders
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-orders:0.8.4"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 3
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 128m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
---
# Source: retail-store-sample-orders-chart/templates/postgresql-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: retail-store-orders-postgresql
  labels:
    helm.sh/chart: orders-0.8.4
    app.kubernetes.io/name: retail-store-orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: retail-store-orders-postgresql
  selector:
    matchLabels:
      app.kubernetes.io/name: retail-store-orders
      app.kubernetes.io/instance: retail-store-orders
      app.kubernetes.io/component: postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: retail-store-orders
        app.kubernetes.io/instance: retail-store-orders
        app.kubernetes.io/component: postgresql
    spec:
      containers:
        - name: postgresql
          image: "public.ecr.aws/docker/library/postgres:16.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_DB
              value: orders
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: password
            - name: PGDATA
              value: /data/pgdata
          volumeMounts:
            - name: data
              mountPath: /data
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
      volumes:
      - name: data
        emptyDir: {}
---
# Source: retail-store-sample-orders-chart/templates/rabbitmq-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: retail-store-orders-rabbitmq
  labels:
    helm.sh/chart: orders-0.8.4
    app.kubernetes.io/name: retail-store-orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: retail-store-orders-rabbitmq
  selector:
    matchLabels:
      app.kubernetes.io/name: retail-store-orders
      app.kubernetes.io/instance: retail-store-orders
      app.kubernetes.io/component: rabbitmq
  template:
    metadata:
      labels:
        app.kubernetes.io/name: retail-store-orders
        app.kubernetes.io/instance: retail-store-orders
        app.kubernetes.io/component: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: "public.ecr.aws/docker/library/rabbitmq:3-management"
          imagePullPolicy: IfNotPresent
          ports:
          - name: amqp
            containerPort: 5672
            protocol: TCP
          - name: http
            containerPort: 15672
            protocol: TCP
          volumeMounts:
          - name: data
            mountPath: "/var/lib/rabbitmq/mnesia"
      volumes:
      - name: data
        emptyDir: {}
---
# Source: retail-store-sample-orders-chart/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "retail-store-orders-test-connection"
  labels:
    helm.sh/chart: orders-0.8.4
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: retail-store-orders
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['retail-store-orders:80/actuator/health/liveness']
  restartPolicy: Never
